{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% set row_number = node.field_images_per_row.value %}
{% set col = 12 / row_number %}

<section id="home" class="full-background" style="background-image: url({{ file_url(node.field_bg_image.entity.fileuri) }});">
  <div class="center">
    <div id="logo" class="logo">
      <img class="img-responsive"
           src="{{ file_url(node.field_logo.entity.fileuri) }}"
           alt="{{ node.field_logo.alt }}" />
    </div>
    <ul>
        {% for key, item in node.field_keywords %}
          <li>{{ item.value }}</li>
        {% endfor %}
    </ul>
    <div class="description">
        {{ node.field_descriptioin.value|raw }}
    </div>
  </div>
</section>

<section id="portfolio" style="background-color: {{ node.field_portfolio_background_color.value }};">
  <div class="_container">
    <div class="row">
      {% for key, item in node.field_portoflio_images if key|first != '#' %}
        <a  rel="group1"
            data-fancybox="group1" data-caption="{{ item.title }}"
            class="fancybox col col-12 col-sm-4 col-md-{{ col }}"
            href="{{ file_url(item.entity.fileuri) }}">
          <img class="img-responsive" src="{{ file_url(item.entity.fileuri) }}" />
        </a>
      {% endfor %}
    </div>
  </div>
</section>

<section id="about" class="full-background" style="background-image: url({{ file_url(node.field_bio_background_picture.entity.fileuri) }});">
  <div class="container">
    <div class="row justify-content-md-center">
      <div class="col col-12 col-sm-12 col-md-4">
        <img class="profile img-responsive"
             src="{{ file_url(node.field_profile_photo.entity.fileuri) }}"
             alt="{{ node.field_logo.alt }}" />
        <h3>{{ node.field_profile_photo.title }}</h3>
      </div>
      <div class="col col-12 col-sm-12 col-md-8">
        <p class="body">
            {{ node.body.value|raw }}
        </p>
      </div>
    </div>
  </div>
</section>
